package HW_OOP_06_SOA.presenter;

import HW_OOP_06_SOA.presenter.TreePresenter;
import HW_OOP_06_SOA.view.ConsoleTreeView;
import HW_OOP_06_SOA.view.TreeView;

public class CommandHandler {

    // объявление приватных (почему ???) экземпляров (классов), которые передаются как параметры, в метод-конструктор
    private TreePresenter presenter;
    private TreeView view;

    // Конструктор в Java — специальный метод, который предназначается для первичной установки значений полей объекта.
    // Конструкторы могут иметь аргументы, как и обычные методы. Также, как и перегруженные методы,
    // конструкторов может быть несколько с различными сигнатурами.        Конструкторы могут быть параметризованы
    // переменными типов, как и дженерик-методы.       При создании нового объекта в Java автоматически вызывается
    // конструктор класса, задача которого — установить начальные значения полей объекта.
    // Отличие между конструкторами и методами: конструкторы инициализируют объекты, создаваемые с помощью оператора new,
    // методы выполняют операции с уже существующими объектами. Конструкторы не могут быть вызваны напрямую, а вызываются,
    // когда объект создается с помощью ключевого слова new. Методы же м.б. вызваны напрямую у объекта, который уже создан.
    // Определение конструкторов и методов похожи. Они могут принимать параметры, иметь модификаторы (т.е. public),
    // а так же имеют тело которое будет выполняться. Конструкторы могут иметь только имя, совпадающее с именем класса.
    // Из них нельзя ничего возвращать (они уже возвращают новый объект). Методы должны что-то возвращать, хотя бы void.
    // Задача конструктора — инициализировать поля объекта значениями, которые передаются в качестве параметров.
    public CommandHandler(TreePresenter presenter, TreeView view) {
        // Большую часть кода пишется внутри классов, которые суть модели объектов реального мира или абстракций.
        // Внутри этих классов определяем переменные (состояния объектов) и методы (поведение объектов).
        // Ключевое слово this в Java используется для ссылки на текущий объект. Другими словами,
        // this ссылается на экземпляр класса, внутри которого оно используется.
        // В примере "public Car(String color) {this.color = color}" this.color означает цвет текущего объекта Car,
        // а color — это параметр конструктора. Без использования this переменная color в конструкторе ссылается на себя,
        // а не на переменную класса. Так же ключевое слово this можно использовать для вызова методов текущего объекта,
        // если есть необходимость уточнить, что метод должен быть вызван именно для текущего объекта.
        // Ключевое слово this в Java - для указания на текущий объект в контексте класса. Это особенно полезно, когда
        // есть необходимость различать м/у переменными класса и параметрами метода или конструктора с одинаков.именами.

        this.presenter = presenter;
        this.view = view;
    }

    public void handleUserInput() {
        while (true) {
            view.displayMessage("Enter command (add, list, sortByName, sortByBirthYear, save, load, exit):");
            // view.displayMessage - это класс и его метод с параметрами - для вывода сообщения ('на консоль' клиенту).
            String command = view.getUserInput(); // принимаем в классе View методом getUserInput() ввод данных
                                                  // и сохраняем в строковой переменной command.

            presenter.handleCommand(command); // вызываем в экземпляре класса Presenter метод handleCommand,
                                              // передавая в него, что введено (и находится в строков.переменной command)
        }
    }
}
